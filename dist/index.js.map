{"version":3,"sources":["../src/actions/youtubeTranscription.ts","../src/services/youtubeTranscriptionService.ts","../src/index.ts"],"sourcesContent":["import {\n    type Action,\n    type HandlerCallback,\n    type IAgentRuntime,\n    type Memory,\n    type State,\n    elizaLogger,\n} from \"@elizaos/core\";\nimport { YouTubeTranscriptionService } from \"../services/youtubeTranscriptionService\";\n\nexport const youtubeTranscription: Action = {\n    name: \"YOUTUBE_TRANSCRIPTION\",\n    similes: [\n        \"YT_TRANSCRIBE\",\n        \"TRANSCRIBE_VIDEO\",\n        \"GET_CAPTIONS\",\n        \"FETCH_YOUTUBE_CAPTIONS\",\n    ],\n    suppressInitialMessage: true,\n    description: \"Fetch and transcribe captions from a YouTube video.\",\n    validate: async (runtime: IAgentRuntime, message: Memory) => {\n        const content = message.content.text;\n        return (\n            !!content &&\n            /(?:https?:\\/\\/)?(?:www\\.)?(youtube\\.com|youtu\\.be)/.test(content)\n        );\n    },\n    handler: async (\n        runtime: IAgentRuntime,\n        message: Memory,\n        state: State,\n        options: any,\n        callback: HandlerCallback\n    ) => {\n        try {\n            elizaLogger.log(\"Composing state for message:\", message);\n            state = (await runtime.composeState(message)) as State;\n\n            const videoUrl = message.content.text;\n            elizaLogger.log(\"YouTube video URL received:\", videoUrl);\n\n            const transcriptionService = new YouTubeTranscriptionService();\n            const transcription = await transcriptionService.getTranscription(\n                videoUrl\n            );\n\n            // Limit the transcription to the first 300 characters for the client\n            const previewLength = 300;\n            const preview =\n                transcription.length > previewLength\n                    ? transcription.slice(0, previewLength) + \"...\"\n                    : transcription;\n\n            callback({\n                text: `Here's a preview of the transcription:\\n\\n${preview}\\n\\nYou can request the full transcription if needed.`,\n            });\n        } catch (error) {\n            elizaLogger.error(\"YouTube transcription error:\", error.message);\n            callback({\n                text: \"Sorry, I couldn't fetch the transcription for this video.\",\n            });\n        }\n    },\n    examples: [\n        [\n            {\n                user: \"{{user1}}\",\n                content: {\n                    text: \"Transcribe the captions for this video: https://www.youtube.com/watch?v=VIDEO_ID\",\n                },\n            },\n            {\n                user: \"{{agentName}}\",\n                content: {\n                    text: \"Here is the transcription preview for the video:\",\n                    action: \"YOUTUBE_TRANSCRIPTION\",\n                },\n            },\n        ],\n        [\n            {\n                user: \"{{user1}}\",\n                content: {\n                    text: \"Can you get the captions for https://youtu.be/VIDEO_ID?\",\n                },\n            },\n            {\n                user: \"{{agentName}}\",\n                content: {\n                    text: \"Here is the transcription preview for the video:\",\n                    action: \"YOUTUBE_TRANSCRIPTION\",\n                },\n            },\n        ],\n    ],\n} as Action;\n","import { Service, ServiceType } from \"@elizaos/core\";\nimport { getSubtitles } from \"youtube-captions-scraper\";\nimport type { IYouTubeTranscriptionService } from \"../types\";\n\nexport class YouTubeTranscriptionService\n    extends Service\n    implements IYouTubeTranscriptionService\n{\n    async initialize(): Promise<void> {\n        // No initialization required for this service.\n    }\n\n    getInstance(): IYouTubeTranscriptionService {\n        return YouTubeTranscriptionService.getInstance();\n    }\n\n    static get serviceType(): ServiceType {\n        return ServiceType.TRANSCRIPTION; // Customize as needed for your use case\n    }\n\n    async getTranscription(videoUrl: string): Promise<string> {\n        try {\n            const videoId = this.extractVideoId(videoUrl);\n            const captions = await getSubtitles({ videoID: videoId });\n            return captions.map(caption => caption.text).join(\" \");\n        } catch (error) {\n            console.error(\"YouTube transcription error:\", error);\n            throw new Error(\n                `Failed to fetch transcription: ${error.message}`\n            );\n        }\n    }\n\n    private extractVideoId(url: string): string {\n        const match =\n            url.match(/(?:https?:\\/\\/)?(?:www\\.)?youtube\\.com\\/.*v=([^&]+)/) ||\n            url.match(/(?:https?:\\/\\/)?(?:www\\.)?youtu\\.be\\/([^?&]+)/);\n        if (!match) {\n            throw new Error(\"Invalid YouTube URL\");\n        }\n        return match[1];\n    }\n}\n","import { youtubeTranscription } from \"./actions/youtubeTranscription\";\nimport type { Plugin } from \"@elizaos/core\";\nimport { YouTubeTranscriptionService } from \"./services/youtubeTranscriptionService\";\n\nexport const youtubeTranscriptionPlugin: Plugin = {\n    name: \"youtubeTranscription\",\n    description: \"Fetch and transcribe YouTube captions\",\n    actions: [youtubeTranscription],\n    evaluators: [],\n    providers: [],\n    services: [new YouTubeTranscriptionService()],\n    clients: [],\n};\n\nexport default youtubeTranscriptionPlugin;\n"],"mappings":"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","names":[]}